import XMonad
import XMonad.Util.EZConfig
import XMonad.Util.Ungrab

import XMonad.Hooks.EwmhDesktops

import XMonad.Hooks.DynamicLog
import XMonad.Util.Loggers

import System.Process
import Data.List.Split
import Data.Map (Map)
import qualified Data.Map as Map
import System.IO.Unsafe
import Data.Maybe
--import XMonad.Hooks.StatusBar
--import XMonad.Hooks.StatusBar.PP
--import qualified XMonad.StackSet as W

main::IO ()

main =  xmonad 
        -- . ewmh =<< statusBar "xmobar" def toggleStrutsKey myConfig
        . ewmh 
        =<< statusBar myBar myXmobarPP toggleStrutsKey myConfig
        -- . withEasySB (statusBarProp "xmobar" (pure def)) toggleStrutsKey 
        -- $ myConfig
        where
                toggleStrutsKey :: XConfig Layout -> (KeyMask, KeySym)
                toggleStrutsKey XConfig{ modMask = m } = (m, xK_b)

myBar = "xmobar"

myXmobarPP :: PP
myXmobarPP = def
                { ppSep             = magenta " â€¢ "
                , ppTitleSanitize   = xmobarStrip
                -- , ppCurrent         = wrap " " "" . xmobarBorder "Top" "#8be9fd" 2
                , ppCurrent         = wrap (blue "[") (blue "]")
                , ppHidden          = white . wrap " " ""
                , ppHiddenNoWindows = lowWhite . wrap " " ""
                , ppUrgent          = red . wrap (yellow "!") (yellow "!")
                -- , ppOrder           = \[ws, l, _, wins] -> [ws, l, wins]
                -- , ppOutput                = writeFile "~/output.txt"
                --, ppExtras          = [logTitles formatFocused formatUnfocused]
                --, ppExtras          = [formatFocused formatUnfocused]
                }
        where
                -- formatFocused   = wrap (white    "[") (white    "]") . magenta . ppWindow
                -- formatUnfocused = wrap (lowWhite "[") (lowWhite "]") . blue    . ppWindow
                -- | Windows should have *some* title, which should not not exceed a
                -- sane length.
                -- ppWindow :: String -> String
                -- ppWindow = xmobarRaw . (\w -> if null w then "untitled" else w) . shorten 30

                getXrdb = Map.fromList (map tuppy (map (splitOn ":\t") (lines xrdbVal)))
                luxr :: String -> String
                luxr n = fromJust (Map.lookup n getXrdb)
                xrdbVal :: String
                xrdbVal = unsafePerformIO (readProcess "xrdb" ["-query"] [])
                tuppy :: [a] -> (a,a)
                tuppy [x,y] = (x,y)

                blue, lowWhite, magenta, red, white, yellow :: String -> String
                magenta  = xmobarColor "#ff79c6" ""
                --magenta  = xmobarColor "color1" ""
                --magenta  = xmobarColor (Map.lookup "*color3" xr) ""
                --magenta  = xmobarColor (luxr "*color3") ""
                blue     = xmobarColor "#bd93f9" ""
                --blue     = xmobarColor (luxr "*color6") ""
                --blue     = xmobarColor (luxr "*color3") ""
                white    = xmobarColor "#f8f8f2" ""
                --yellow   = xmobarColor "#f1fa8c" ""
                yellow   = xmobarColor (luxr "*color3") ""
                red      = xmobarColor "#ff5555" ""
                lowWhite = xmobarColor "#bbbbbb" ""


myConfig = def
        { terminal    = "urxvt"
        , modMask     = mod4Mask
        , borderWidth = 2
        , logHook = dynamicLog
        }
        `additionalKeysP`
        [ ("M-d", spawn "rofi -show drun")
        , ("<Print>", spawn "scrot -o 'lastScrot.png' -e 'xclip -selection clipboard -t image/png < $f'")
        , ("C-<Print>", unGrab *> spawn "scrot -o 'lastScrot.png' -ue 'xclip -selection clipboard -t image/png < $f'")
        , ("S-<Print>", unGrab *> spawn "scrot -o 'lastScrot.png' -se 'xclip -selection clipboard -t image/png < $f'")
        , ("M-q", spawn "xmonad --recompile; pkill xmobar; xmonad --restart")
        ]

